Program Slicing
Amin Ranj Bar
1
Introduction

Slicing: 
decomposition technique that extracts relevant 
statements from a program

Executable backward static slicing: 

1979 Ph.D. thesis (
U.Michigan
)

Forward slicing: 
Susan 
Horwitz
, 
et al 
1990 (
U.Wisc
.) 
[HRB90]

Dynamic slicing: 
Bogdan
Korel
and 
Janusz
Laski 1988
2
Why Slicing?

Software Maintenance
: changing source code 
without unwanted side effects

Testing
: reduce cost of regression testing after 
modifications (only run those tests that needed)

Debugging


Software Quality Assurance
: validate interactions 
between safety
-
critical components

Reverse Engineering
: comprehending the design by 
abstracting out of the source code and the design 
decisions
3
What use?

Understanding Programs

What is affected by what?

Restructuring Programs



Program Specialization and Reuse

Slices = specialized programs

Only reuse needed slices

Program Differencing

Compare slices to identify changes

Testing

What new test cases would improve coverage?

What regression tests must be rerun after a change?
4
Slicing

Identifying statements in a program that may affect 
or be affected by the value of a variable
5
Slicing Overview

Types of slices

Backward static slice

Executable slice

Forward static slice

Dynamic slice

Execution slice

Levels of slices

Intraprocedural

Interprocedural
6
Types of Slicing (Backward
Static)

A backward slice of a program with respect to a 
program point 
p 
and set of program variables 
V 
consists of all statements and predicates in the 
program that may affect the value of variables in 
V 
at 
p.

The program point 
p 
and the variables 
V 
together 
form the slicing criterion, usually written <
p, V
>
7
Types of Slicing (Backward
Static)
8
Types of Slicing (Backward
Static)
9
Types of Slicing (Executable)

A slice is executable if the statements in the slice 
form a syntactically correct program that can be 
executed.

If the slice is computed correctly (safely), the result 
of running the program that is the executable slice 
produces the same result for variables in 
V 
at 
p 
for 
all inputs.
10
Types of Slicing (Executable)
11
Types of Slicing (Forward Static)

A forward slice of a program with respect to a 
program point 
p 
and set of program variables 
V 
consists of all statements and predicates in the 
program that may be affected by the value of 
variables in 
V 
at 
p.

The program point 
p 
and the variables 
V 
together 
form the slicing criterion, usually written <
p, V
>.
12
Types of Slicing (Forward Static)
13
Types of Slicing (Forward Static)
14
Types of Slicing (Forward Static)
15
Types of Slicing (Forward Static)
16
Types of Slicing (Dynamic)

A dynamic slice of a program with respect to an 
input value of a variable 
v 
at a program point 
p 
for a 
particular execution 
e 
of the program is the set of all 
statements in the program that affect the value of 
v 
at 
p.

The program point 
p, 
the variables 
V, 
and the input i 
for 
e 
form the slicing criterion, usually written <
i
, p, 
v
>. The slicing uses the execution history or 
trajectory for the program with input 
i
.
17
Types of Slicing (Dynamic)
18
Types of Slicing (Dynamic)
19
Types of Slicing (Dynamic)
20
Types of Slicing (Dynamic)
21
Types of Slicing (Dynamic)
22
Types of Slicing (Dynamic)
23
Types of Slicing (Execution)

An execution slice of a program with respect to an 
input value of a variable 
v 
is the set of statements in 
the program that are executed with input 
v.
24
Types of Slicing (Execution)
25
Types of Slicing (Execution)
26
Program Slicing

A 
backward slice 
with respect to variable 
v 
at 
program point 
p 
is the program subset that may 
influence the value of variable 
v 
at point 
p
.

A 
forward slice 
with respect to variable 
v 
at 
program point 
p 
is the program subset that may be 
influenced by the value of variable 
v 
at point 
p
.
27
Example
28
Backward Slice
29
Forward Slice
30
How are slices computed?

Reachability in a dependence graph

Program Dependence Graph (PDG)

Dependences within one procedure

Intra
procedural
slicing is reachability in one PDG

System Dependence Graph (SDG)

Dependences within entire system

Inter
procedural
slicing is reachability in the SDG
31
How is a PDG computed?

Control Flow Graph (CFG)

PDG is union of:

Control Dependence Graph

Flow Dependence Graph
computed from CFG
32
Control Flow Graph
33
Control Dependence Graph (CDG)
34
Flow (Data) Dependence Graph (DDG)
35
Program Dependence Graph
36
Backward Slice
37
Backward Slice (2)
38
Backward Slice (3)
39
Backward Slice (4)
40
Slice Extraction
41
Line
-
Character
-
Count Program
42
Character
-
Count Program
43
Line
-
Count Program
44
Inter
procedural
Slice
45
Inter
procedural
Slice
46
Dynamic Program Slicing

Static program slicing is concerned with all the statements that 
could
influence the value of the variable occurrence for 
any
input.

Dynamic program slicing is concerned with all the statements that 
did
affect the value of the variable occurrence for the 
current 
input.

It is especially suitable for program debugging.

Typically, when debugging the value of a variable at some program 
statement is observed to be incorrect. dynamic program slicing is used to 
identify relevant subset of the program so as to look for the possible 
cause of the error.

Here, four approaches for dynamic program slicing [AH90] are 
introduced.
47
Example 1

PDG and Static Slicing
48
Example 1

PDG and Static Slicing
49
Dynamic Slicing: Approach 1

Approach 1

To obtain the dynamic slice with respect to a variable for 

Program Dependence Graph with respect to the nodes that 
occur in the execution history, and then use the static 
slicing algorithm on the projected Dependence Graph to 
find the desired dynamic slice.
50
Example 1

Dynamic Slicing, Approach 1
51
Example 1

Dynamic Slicing, Approach 1 (cont.)
52
Example 1

Dynamic Slicing, Approach 1 (cont.)
53
Weakness of Approach 1

The problem with Approach 1 lies in the fact that,

A statement may have multiple reaching definitions of the 
same variable in the program flow
-
graph, and hence it may 
have multiple out
-
going data dependence edges for the 
same variable in the Program Dependence Graph.
54
Example 2

Dynamic Slicing, Approach 1
55
Example 2

Dynamic Slicing, Approach 1(cont.)
56
Dynamic Slicing: Approach 2

Approach 2

Mark the edges of the Program Dependence Graph as the 
corresponding dependencies arise during the program 
execution; then traverse the graph only along the marked 
edges to find the slice.
57
Example 2

Dynamic Slicing, Approach 2
58
Example 2

Dynamic Slicing, Approach 2
59
Example 2

Dynamic Slicing, Approach 2
60
Weakness of Approach 2

The problem with Approach 2 lies in the fact that,

In the presence of loops, the slice may sometimes include 
more statements than necessary.
61
Example 3

Dynamic Slicing, Approach 2
62
Example 3

Dynamic Slicing, Approach 2(cont.)
63
Dynamic Slicing: Approach 3

Approach 3

Create a separate node for each occurrence of a statement 
in the execution history, with outgoing dependence edges 
to only those statements (their specific occurrences) on 
which this statement occurrence is dependent.

The resulting graph is called 
Dynamic Dependence 
Graph
.
64
Example 3

Dynamic Slicing, Approach 3
65
Weakness of Approach 3

The problem with Approach 3 lies in the fact that,

The size of a Dynamic Dependence Graph (total number 
of nodes and edges) is, in general, 
unbounded
.

The number of nodes in the graph is equal to the number 
of statements in the execution history, which, in general, 
may depend on values of run
-
time inputs.
66
Dynamic Slicing: Approach 4

Approach 4

Instead of creating a new node for every occurrence of a 
statement in the execution history, create a new node only 
if another node with the same transitive dependencies does 
not already exist.

The resulting graph is called 
Reduced Dynamic 
Dependence Graph
.
67
Rules Employed in Approach 4

Every time a statement, Si, gets executed, we determine the set of nodes, 
D, that last assigned values to the variables used by S
i
, and the last 
occurrence, C, of the control predicate node of the statement.

If a node, n associated with S
i
already exists whose immediate 
descendants are the same as  
D
U
C
, we associate the new occurrence of S
i
with n. Otherwise, we create a new node with outgoing edges to all 
nodes in 
D
U
C
.

Whenever we need to create a new node, say for statement S
i
, we first 
determine if any of its immediate descendants say node v already has a 
dependency on a previous occurrence of S
i
and if the other immediate 
descendants of the occurrences of S
i
are also reachable from v. 

If so, we can merge the new occurrence of S
i
with v.
68
Example 3

Dynamic Slicing, Approach 4
69
References

[Wei81] 
Mark Weiser, 
Program Slicing
. Proceedings of 
the 5
th
International Conference on Software 
Engineering, pp. 439
-
449, 1981.

[HRB90] 
Susan 
Horwitz
, Thomas Reps, and Binkley, 
Interprocedural
Slicing Using Dependence Graphs
. 
ACM Transactions on Programming Languages and 
Systems, Vol. 12, No. 1, pp. 26
-
60, 1990.

[AH90] 
Hiralal
Agrawal and Joseph R. 
Horgan
, 
Dynamic Program Slicing
. Proceedings of the ACM 
SIGPLAN 1990 conference on Programming language 
design and implementation 1990 implementation, 1990.
70
